// <auto-generated />
using System;
using HR.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HR.Infrastructure.Migrations
{
    [DbContext(typeof(HumanResourcesDbContext))]
    [Migration("20230228201144_testupdated")]
    partial class testupdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HR.Domain.Entities.AppCompany", b =>
                {
                    b.Property<Guid>("AppCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompanyFounded")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyTitle")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DealEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DealStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MersisNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<int>("Sector")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxAdministration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AppCompanyID");

                    b.ToTable("AppCompany");
                });

            modelBuilder.Entity("HR.Domain.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe497e96-4eef-4952-8eeb-0436b5a90757"),
                            ConcurrencyStamp = "fdbbe90b-d673-4ef3-8854-8772d7491bea",
                            Name = "Personnel",
                            NormalizedName = "PERSONNEL"
                        },
                        new
                        {
                            Id = new Guid("c1f0dda8-6e55-4245-9242-4d84beb324d3"),
                            ConcurrencyStamp = "ade165cd-43b1-4b8b-8e6c-f1a3da4c6312",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("f841fff9-2e31-4de3-a9d3-28d7936d7872"),
                            ConcurrencyStamp = "bc890c65-47ad-4ecc-ac14-04fa205e46c1",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("HR.Domain.Entities.AppRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sector")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b649b347-ac6f-4ae8-995a-531bace246ac"),
                            AccessFailedCount = 0,
                            Address = "Yanişehir mah. 18 sok no:41 daire:4, Denizli/Merkezefendi",
                            BirthDate = new DateTime(1997, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "37b0116f-9105-47a7-9375-cac2a750b944",
                            CreateDate = new DateTime(2023, 2, 28, 23, 11, 44, 269, DateTimeKind.Local).AddTicks(8853),
                            Department = 2,
                            Email = "ramazan.yaylali@bilgeadamboost.com",
                            EmailConfirmed = false,
                            EndingDate = new DateTime(2022, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityNumber = "41485012455",
                            ImagePath = "/img/userspic/Ramazan.jpg",
                            IsActive = false,
                            LockoutEnabled = false,
                            Name = "Ramazan",
                            NormalizedEmail = "RAMAZAN.YAYLALI@BILGEADAMBOOST.COM",
                            NormalizedUserName = "RAMAZANY",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ2fDo20QukLEU9kt/RLYXqZb3pgSTzqiZRqlHC8FL+DmFZPp0A0gtWTs8juFJwR7Q==",
                            PhoneNumber = 5365867759L,
                            PhoneNumberConfirmed = false,
                            PlaceOfBirth = "Acıpayam",
                            Salary = 10000m,
                            Sector = 10,
                            SecurityStamp = "cd3778cf-b7fa-4bd4-b028-05a2fbd72cda",
                            StartingDate = new DateTime(2022, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Surname = "YAYLALI",
                            TwoFactorEnabled = false,
                            UserName = "RamazanY"
                        },
                        new
                        {
                            Id = new Guid("231ac3ab-570d-483d-a89e-ee419a8e18ce"),
                            AccessFailedCount = 0,
                            Address = "Yalı mahallesi Caher Dudayev Bulvarı No:107 D:B, İzmir/Karşıyaka ",
                            BirthDate = new DateTime(1988, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d42fd59d-7cb3-478f-ad80-cbf3d9f04084",
                            CreateDate = new DateTime(2023, 2, 28, 23, 11, 44, 269, DateTimeKind.Local).AddTicks(8997),
                            Department = 3,
                            Email = "hazel.calkar@bilgeadamboost.com",
                            EmailConfirmed = false,
                            IdentityNumber = "31354697822",
                            IsActive = true,
                            LockoutEnabled = false,
                            Name = "Hazel",
                            NormalizedEmail = "HAZEL.CALKAR@BILGEADAMBOOST.COM",
                            NormalizedUserName = "HAZELC",
                            PasswordHash = "AQAAAAEAACcQAAAAEFyUyw/oQaZH9UpzUA8WfVAA8yszDXGtCHi39DooU8TrBprkKrNdlqI/Ocj7FRR4IA==",
                            PhoneNumber = 5365867759L,
                            PhoneNumberConfirmed = false,
                            PlaceOfBirth = "İzmir",
                            Salary = 13000m,
                            Sector = 10,
                            SecurityStamp = "df3020b9-77be-41c9-9d53-c02fda12d269",
                            StartingDate = new DateTime(2020, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Surname = "ÇALKAR",
                            TwoFactorEnabled = false,
                            UserName = "HazelC"
                        },
                        new
                        {
                            Id = new Guid("127f4be8-b872-4d5d-839a-2bb69a7945fa"),
                            AccessFailedCount = 0,
                            Address = "Bostanlı mahallesi Cengiz Kocatoros Sokağı No: 85/A, İzmir/Karşıyaka ",
                            BirthDate = new DateTime(1982, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c1ed4316-a5ff-4b81-9089-675ed7630bfd",
                            CreateDate = new DateTime(2023, 2, 28, 23, 11, 44, 269, DateTimeKind.Local).AddTicks(9018),
                            Department = 3,
                            Email = "aysenur.altınsoy@bilgeadamboost.com",
                            EmailConfirmed = false,
                            IdentityNumber = "78953246782",
                            IsActive = true,
                            LockoutEnabled = false,
                            Name = "Ayşenur",
                            NormalizedEmail = "AYSENUR.ALTINSOY@BILGEADAMBOOST.COM",
                            NormalizedUserName = "AYSENURA",
                            PasswordHash = "AQAAAAEAACcQAAAAEDjUREKKdBtrGrLNk97gnOP7gWZeYAA4yRbWu1QrDSOSxzh1kR0wSm++ioOh9nKuwA==",
                            PhoneNumber = 5365867759L,
                            PhoneNumberConfirmed = false,
                            PlaceOfBirth = "İzmir",
                            Salary = 14000m,
                            Sector = 10,
                            SecurityStamp = "7208ed07-f673-42a5-bbbd-991561488d37",
                            StartingDate = new DateTime(2019, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Surname = "ALTINSOY",
                            TwoFactorEnabled = false,
                            UserName = "AysenurA"
                        },
                        new
                        {
                            Id = new Guid("26cbb6ca-8b86-414b-92f4-8302b88d2758"),
                            AccessFailedCount = 0,
                            Address = "Caferağa mahallesi Mühürdar Cd. No:76 kat:5, İstanbul/Sarıyer",
                            BirthDate = new DateTime(1995, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "bc5186a1-7d92-4826-ab2a-faf25ac13c1d",
                            CreateDate = new DateTime(2023, 2, 28, 23, 11, 44, 269, DateTimeKind.Local).AddTicks(9040),
                            Department = 2,
                            Email = "serkan.temiz@bilgeadamboost.com",
                            EmailConfirmed = false,
                            IdentityNumber = "19637426548",
                            IsActive = true,
                            LockoutEnabled = false,
                            Name = "Serkan",
                            NormalizedEmail = "SERKAN.TEMIZ@BILGEADAMBOOST.COM",
                            NormalizedUserName = "SERKANT",
                            PasswordHash = "AQAAAAEAACcQAAAAEEiJHR5MGFdam2hIAqjGjMwT7Pd0KxCtYG58wa5T1Vet4dMLQPq//Bl1IHY4ytCA8g==",
                            PhoneNumber = 5425324892L,
                            PhoneNumberConfirmed = false,
                            PlaceOfBirth = "İstanbul",
                            Salary = 14000m,
                            Sector = 8,
                            SecurityStamp = "4806a10a-df48-41e2-92db-396fe7bcf82d",
                            StartingDate = new DateTime(2020, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Surname = "TEMİZ",
                            TwoFactorEnabled = false,
                            UserName = "SerkanT"
                        },
                        new
                        {
                            Id = new Guid("d3715a73-a2bd-40dc-8988-794bf20da1a0"),
                            AccessFailedCount = 0,
                            Address = "Cumhuriyet mah. 5034 sok no:2 daire:3,Denizli/Pamukkale",
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "70e1c794-4d1e-43eb-8181-ee1810615d0f",
                            CreateDate = new DateTime(2023, 2, 28, 23, 11, 44, 269, DateTimeKind.Local).AddTicks(9057),
                            Department = 2,
                            Email = "fatih.bag@bilgeadamboost.com",
                            EmailConfirmed = false,
                            EndingDate = new DateTime(2023, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdentityNumber = "12312345678",
                            IsActive = false,
                            LockoutEnabled = false,
                            Name = "Fatih",
                            NormalizedEmail = "FATIH.BAG@BILGEADAMBOOST.COM",
                            NormalizedUserName = "FATIHB",
                            PasswordHash = "AQAAAAEAACcQAAAAENPrPT0XvmOr7NgjL55u0TQH3utgMiq72PYeSxneaMEkv/oSRp0aV1pt0QXb6MltlA==",
                            PhoneNumber = 5318700685L,
                            PhoneNumberConfirmed = false,
                            PlaceOfBirth = "Denizli",
                            Salary = 13000m,
                            Sector = 7,
                            SecurityStamp = "3ec9d99b-1604-441a-9a12-8778a38f244d",
                            StartingDate = new DateTime(2021, 7, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Surname = "BAG",
                            TwoFactorEnabled = false,
                            UserName = "FatihB"
                        });
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUserAdvance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdvanceType")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ApprovalDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ReplyDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("RequestDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppUserAdvance");
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUserCliams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b649b347-ac6f-4ae8-995a-531bace246ac"),
                            RoleId = new Guid("fe497e96-4eef-4952-8eeb-0436b5a90757")
                        },
                        new
                        {
                            UserId = new Guid("231ac3ab-570d-483d-a89e-ee419a8e18ce"),
                            RoleId = new Guid("fe497e96-4eef-4952-8eeb-0436b5a90757")
                        },
                        new
                        {
                            UserId = new Guid("127f4be8-b872-4d5d-839a-2bb69a7945fa"),
                            RoleId = new Guid("fe497e96-4eef-4952-8eeb-0436b5a90757")
                        },
                        new
                        {
                            UserId = new Guid("26cbb6ca-8b86-414b-92f4-8302b88d2758"),
                            RoleId = new Guid("c1f0dda8-6e55-4245-9242-4d84beb324d3")
                        },
                        new
                        {
                            UserId = new Guid("d3715a73-a2bd-40dc-8988-794bf20da1a0"),
                            RoleId = new Guid("c1f0dda8-6e55-4245-9242-4d84beb324d3")
                        });
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HR.Domain.Entities.AppRoleClaims", b =>
                {
                    b.HasOne("HR.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("HR.Domain.Entities.AppCompany", "Company")
                        .WithMany("Personnels")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUserAdvance", b =>
                {
                    b.HasOne("HR.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AppUserAdvances")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUserCliams", b =>
                {
                    b.HasOne("HR.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUserLogin", b =>
                {
                    b.HasOne("HR.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUserRole", b =>
                {
                    b.HasOne("HR.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUserToken", b =>
                {
                    b.HasOne("HR.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HR.Domain.Entities.AppCompany", b =>
                {
                    b.Navigation("Personnels");
                });

            modelBuilder.Entity("HR.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("AppUserAdvances");
                });
#pragma warning restore 612, 618
        }
    }
}
